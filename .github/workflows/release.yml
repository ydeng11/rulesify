name: Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags

env:
  CARGO_TERM_COLOR: always

# Add permissions block at workflow level
permissions:
  contents: write # This gives permission to create releases and upload assets

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features -- --test-threads=1

  create-release:
    needs: test
    runs-on: ubuntu-latest
    # Also add permissions at job level for extra clarity
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        id: release_notes
        run: |
          echo "## Rulesify CLI v${{ steps.get_version.outputs.version }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Installation" >> RELEASE_NOTES.md
          echo '```bash' >> RELEASE_NOTES.md
          echo "curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/install.sh | sh" >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Changelog" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          # Note: CHANGELOG.md uses [0.1.5] format (without 'v' prefix)
          awk -v version="## [${{ steps.get_version.outputs.version }}]" '
            $0 ~ version {p=1; print; next}
            p && /^## \[/ {p=0}
            p {print}
          ' CHANGELOG.md >> RELEASE_NOTES.md

      - name: Create Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create the release using gh cli
          gh release create ${{ github.ref_name }} \
            --title "Rulesify CLI ${{ steps.get_version.outputs.version }}" \
            --notes-file RELEASE_NOTES.md \
            --draft=false \
            --prerelease=false

          # Get the release upload URL and set it as output
          UPLOAD_URL=$(gh api repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} | jq -r .upload_url)
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT

  build-and-release:
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rulesify
            asset_name: rulesify-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: rulesify
            asset_name: rulesify-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rulesify
            asset_name: rulesify-darwin-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: rulesify
            asset_name: rulesify-darwin-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rulesify.exe
            asset_name: rulesify-windows-amd64.exe

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          use-cross: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}

      - name: Package Binary and Generate Checksum
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ../../../${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
            certutil -hashfile ../../../${{ matrix.asset_name }}.zip SHA256 > ../../../${{ matrix.asset_name }}.zip.sha256
          else
            tar -czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
            shasum -a 256 ../../../${{ matrix.asset_name }}.tar.gz > ../../../${{ matrix.asset_name }}.tar.gz.sha256
          fi
          cd -

      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            gh release upload ${{ github.ref_name }} ${{ matrix.asset_name }}.zip --clobber
          else
            gh release upload ${{ github.ref_name }} ${{ matrix.asset_name }}.tar.gz --clobber
          fi

      - name: Upload Checksum
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            gh release upload ${{ github.ref_name }} ${{ matrix.asset_name }}.zip.sha256 --clobber
          else
            gh release upload ${{ github.ref_name }} ${{ matrix.asset_name }}.tar.gz.sha256 --clobber
          fi

  upload-install-script:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Upload Install Script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ github.ref_name }} install.sh --clobber
